# Multi-stage starter template for:
# -Deploying the solution to a Validation environment
# -Deploying the solution to a Test environment
# -Deploying the solution to a Production environment after approval
trigger: none
pr: none
resources:
  repositories:
  - repository: PipelineRepo  # repository name (DO NOT CHANGE THIS VALUE) 
    type: github
    endpoint: coe-starter-kit
    name: Microsoft/coe-alm-accelerator-templates  #This is the name of the repo in the current project in Azure Devops that has the pipeline templates. If the repo is in a different project you can specify the project and repo using the format ProjectContainingTheBuildTemplates/RepositoryContainingTheBuildTemplates (https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#type)
  pipelines:
    - pipeline: build-ALMAcceleratorSampleSolution
      source: build-ALMAcceleratorSampleSolution
      trigger: 
        branches:
          include:
          - mochs-aas-77
          - ALMAcceleratorSampleSolution
          - main
stages:
- stage: validate
  displayName: Deploy to Build Validation Environment
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: 
    pool: 
      vmImage: 'windows-2019'
    variables: # The build contains an output variable named TriggerSolutionUpgrade that is used in the deployment steps to determine whether to perform a solution upgrade or update
      TriggerSolutionUpgrade: $[ stageDependencies.build.buildjob.outputs['setTriggerSolutionUpgradeVariable.TriggerSolutionUpgrade'] ]
    environment: 'Validate'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: Pipelines\Templates\deploy-Solution.yml@PipelineRepo #The @PipelineRepo tells the pipeline where to look for the templates based on the name of the repo you specified above
            parameters:
              serviceConnection: '$(ValidationServiceConnection)'
              environmentVariables: '$(ValidationEnvironmentVariables)'
              connectionReferences: '$(ValidationConnectionReferences)'
              aadGroupTeamConfiguration: '$(ValidationAadGroupTeamConfiguration)'
              aadGroupCanvasConfiguration: '$(ValidationAadGroupCanvasConfiguration)'
              solutionComponentOwnershipConfiguration: '$(ValidationSolutionComponentOwnershipConfiguration)'
              
- stage: test
  displayName: Deploy to Test
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: 
    pool: 
      vmImage: 'windows-2019'
    variables: # The build contains an output variable named TriggerSolutionUpgrade that is used in the deployment steps to determine whether to perform a solution upgrade or update
      TriggerSolutionUpgrade: $[ stageDependencies.build.buildjob.outputs['setTriggerSolutionUpgradeVariable.TriggerSolutionUpgrade'] ]
    environment: 'Test'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: Pipelines\Templates\deploy-Solution.yml@PipelineRepo #The @PipelineRepo tells the pipeline where to look for the templates based on the name of the repo you specified above
            parameters:
              serviceConnection: '$(TestServiceConnection)'
              environmentVariables: '$(TestEnvironmentVariables)'
              connectionReferences: '$(TestConnectionReferences)'
              aadGroupTeamConfiguration: '$(TestAadGroupTeamConfiguration)'
              aadGroupCanvasConfiguration: '$(TestAadGroupCanvasConfiguration)'
              solutionComponentOwnershipConfiguration: '$(TestSolutionComponentOwnershipConfiguration)'

- stage: prod
  displayName: Deploy to Production
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], variables['ProductionSourceBranch']))
  jobs:
  - deployment: 
    pool: 
      vmImage: 'windows-2019'
    variables: # The build contains an output variable named TriggerSolutionUpgrade that is used in the deployment steps to determine whether to perform a solution upgrade or update
      TriggerSolutionUpgrade: $[ stageDependencies.build.buildjob.outputs['setTriggerSolutionUpgradeVariable.TriggerSolutionUpgrade'] ]
    environment: 'Production' # If you want to require an approval before running this stage, make sure you configure the approval (see: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/approvals).
    strategy:
      runOnce:
        deploy:
          steps:
          - template: Pipelines\Templates\deploy-Solution.yml@PipelineRepo #The @PipelineRepo tells the pipeline where to look for the templates based on the name of the repo you specified above
            parameters:
              serviceConnection: '$(ProdServiceConnection)'
              environmentVariables: '$(ProdEnvironmentVariables)'
              connectionReferences: '$(ProdConnectionReferences)'
              aadGroupTeamConfiguration: '$(ProdAadGroupTeamConfiguration)'
              aadGroupCanvasConfiguration: '$(ProdAadGroupCanvasConfiguration)'
              solutionComponentOwnershipConfiguration: '$(ProdSolutionComponentOwnershipConfiguration)'
